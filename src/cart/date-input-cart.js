import $ from 'jquery';
import { DateManagement } from '../rooms/date-management';
import { databaseAccess } from '../common/database-access'

export const dateInputCart = (arrivalDate, departureDate, roomId) => {
    const dateInputCart = $('<div id="date-picker-cart"></div>')
    const date = new DateManagement()
    const today = date.today;

    // I could create data input to reuse, but then it would have to take 5 arguments or so
    const dateInput1 = $(`<div class='date-input'>
    <label for='arrival-date-cart'>Date of arrival:</label>
    <input type='date' value='${arrivalDate}' id='arrival-date-cart' min='${today}' max='${date.addYears(today, 1)}' required></input>
    </div>`)
    const dateInput2 = $(`<div class='date-input'>
    <label for='departure-date-cart'>Date of departure:</label>
    <input data-quantity='' data-dates='' type='date' value='${departureDate}' id='departure-date-cart' min='${date.addDays(today, 1)}' max='${date.addYears(today, 1)}' required></input>
    </div>`)
    //custom attributes data-quantity and data-dates to keep data generated by functions

    $(dateInputCart).on('keydown', (e) => {
        switch (e.key) {
            case 'ArrowUp':
                return false;
            case 'ArrowDown':
                return false;
            case 'ArrowLeft':
                return false;
            case 'ArrowRight':
                return false;
            default:
                return false;
        }
    })

    // handling changes of date input
    $(dateInputCart).on('change', function () {
        const dateOfArrival = $('#arrival-date-cart').val()
        const dateOfDeparture = $('#departure-date-cart').val()
        const dateDifference = date.dateDifference(dateOfDeparture, dateOfArrival)
        // handle changes to picker, departure cannot be earlier than arrival etc
        $('#departure-date-cart').attr('min', date.addDays(dateOfArrival, 1)).attr('disabled', false)
        if (dateDifference <= 0) {
            $('#departure-date-cart').val(date.addDays(dateOfArrival, 1))
        }

        const listDateDifference = date.listDateDifference(dateOfArrival, dateOfDeparture)
        const isOccupied = databaseAccess.checkRoom(roomId, listDateDifference);
        $('#departure-date-cart').attr('data-quantity', listDateDifference.length)
        $('#departure-date-cart').attr('data-dates', JSON.stringify(listDateDifference))

        //check if room is available during selected dates
        isOccupied.then(status => {
            if (status) {
                if ($('#edit-cart').has('.unavailable').length <= 0) {
                    $('<p class="unavailable">Room is unavailable at selected date</p>').insertBefore($('#edit-cart').find('.cart-add'))
                }
                $('#edit-cart').find('.cart-add').prop('disabled', true)
            } else {
                $('#edit-cart').find('.unavailable').remove();
                $('#edit-cart').find('.cart-add').prop('disabled', false)
            }
        })
    })
    dateInputCart.append(dateInput1);
    dateInputCart.append(dateInput2);
    return dateInputCart
}